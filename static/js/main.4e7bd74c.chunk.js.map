{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","isRequired","onChange","onBlur","error","useState","Math","random","toFixed","slice","id","htmlFor","type","classNames","event","target","required","NewMovie","onAdd","count","setCount","createdMovie","setCreatedMovie","errors","setErrors","validateForm","newErrors","trim","Object","keys","length","handleInputChange","field","onSubmit","preventDefault","disabled","App","moviesFromServer","setMovies","newMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e7bd74c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string;\n  value: string;\n  label?: string;\n  placeholder?: string;\n  isRequired?: boolean;\n  onChange?: (newValue: string) => void;\n  onBlur?: () => void;\n  error?: string;\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  isRequired = false,\n  onChange = () => {},\n  onBlur = () => {},\n  error = '',\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': !!error,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={(event) => {\n            onChange(event.target.value);\n          }}\n          onBlur={() => {\n            onBlur();\n          }}\n          required={isRequired}\n        />\n      </div>\n\n      {error && (\n        <p className=\"help is-danger\">{error}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [createdMovie, setCreatedMovie] = useState<Movie>({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\n\n  const validateForm = (): boolean => {\n    const newErrors: { [key: string]: string } = {};\n\n    if (createdMovie.title.trim() === '') {\n      newErrors.title = 'Title is required';\n    }\n\n    if (createdMovie.imgUrl.trim() === '') {\n      newErrors.imgUrl = 'Image URL is required';\n    }\n\n    if (createdMovie.imdbUrl.trim() === '') {\n      newErrors.imdbUrl = 'IMDb URL is required';\n    }\n\n    if (createdMovie.imdbId.trim() === '') {\n      newErrors.imdbId = 'IMDb ID is required';\n    }\n\n    setErrors(newErrors);\n\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setCreatedMovie({ ...createdMovie, [field]: value });\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (validateForm()) {\n      onAdd(createdMovie);\n      setCreatedMovie({\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      });\n      setCount(count + 1);\n    }\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={handleSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={createdMovie.title}\n        onChange={(value) => handleInputChange('title', value)}\n        onBlur={() => validateForm()}\n        error={errors.title}\n        isRequired\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={createdMovie.description}\n        onChange={(value) => handleInputChange('description', value)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={createdMovie.imgUrl}\n        onChange={(value) => handleInputChange('imgUrl', value)}\n        onBlur={() => validateForm()}\n        error={errors.imgUrl}\n        isRequired\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={createdMovie.imdbUrl}\n        onChange={(value) => handleInputChange('imdbUrl', value)}\n        onBlur={() => validateForm()}\n        error={errors.imdbUrl}\n        isRequired\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={createdMovie.imdbId}\n        onChange={(value) => handleInputChange('imdbId', value)}\n        onBlur={() => validateForm()}\n        error={errors.imdbId}\n        isRequired\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!createdMovie.title\n              || !createdMovie.imgUrl\n              || !createdMovie.imdbUrl\n              || !createdMovie.imdbId}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies([...movies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}